# GraphQL schema example
#
# https://gqlgen.com/getting-started/
interface Gorm {
    id:ID!
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time!
}

enum ItemUnitType {
    tablet
    syrup
    suspension
    package
    box
}

type Item implements Gorm {
    id:ID!
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time!
    quantity: Int!
    batch: String
    unit: ItemUnitType
    title: String!
    price: String!
    expiresAt: Time!
    employee: Employee! @goTag(key: "gorm", value: "-")
    shop: Shop! @goTag(key: "gorm", value: "-")
}

input ItemInput {
    quantity: Int!
    title: String!
    price: String!
    batch: String
    unit: ItemUnitType
}

type Employee implements Gorm {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:INTEGER;autoIncrement;")
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time!
    name: String! @goTag(key: "gorm", value: "index;size:50")
    shops: [Shop!]! @goTag(key: "gorm", value: "-")
}

input EmployeeInput {
    name: String!
}

input ShopInput {
    title: String!
}

# add tracking type package/tabs
type Shop implements Gorm {
    id:ID!
    deletedAt:Time!
    createdAt:Time!
    updatedAt:Time!
    name: String!
    type: String
    admin: Employee! @goTag(key: "gorm", value: "-")
    users: [Employee!]! @goTag(key: "gorm", value: "-")
}

type Order implements Gorm {
    id:ID!
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time!
    totalPrice: String!
    employee:Employee! @goTag(key: "gorm", value: "-")
}

type OrderedItem {
    id:ID!
    quantity: Int!
    item: Item!
}

type Query {
    item(id: ID!): Item!
    items(shopId:ID!): [Item!]!
    shop(id: ID!): Shop!
    shops: [Shop!]!
}

type Mutation {
    createItem(input: ItemInput!): Item!
    createEmployee(input: EmployeeInput!): Employee!
    createShop(input: ShopInput!): Shop!
    editItem(id: ID!,input: ItemInput!): Item!
    deleteItem(id: ID!): Item!
}

scalar Time

directive @goModel(
    model: String
    models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION