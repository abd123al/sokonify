# GraphQL schema example
#
# https://gqlgen.com/getting-started/
interface Gorm {
    id:ID!
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time
}

enum CategoryType {
    # default
    products
    # so that it will be easy to track expenses
    expenses
    # This is for controlling salary fields
    salary
}

enum CustomerType {
    customer
    supplier
}

# change of status must be reflected on ledger.
enum OrderStatus {
    canceled
    completed
    pending
}

enum OrderType {
    # order for receiving items
    purchase
    # order for selling items
    sale
    # Let's say we pay for some things eg electricity.
    expense
    # If things have expired/damaged/stolen they can be automatically disposed.
    loss
    # transfer from one store to another
    transfer
}

enum PaymentType {
    cash
    loan
    bank
}

enum StaffRole {
    # who buys
    customer
    # can edit things in store
    staff
    # can assign users in stores
    owner
    # who brings products in
    supplier
}

# Having multiple type will allow transfer between parties
enum StoreType {
    shop
    warehouse #
    storage # Pharmacy inner store
}

enum ProductsBy {
    store
    category
}

enum OrdersBy {
    customer # for customers
    staff # for who completed order
    store # for both issuers and receivers
}

enum SortBy {
    asc
    desc
}

enum ItemsBy {
    store
    category
    product
}

# This can log via terminal
type Admin implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(50);default:null") @goTag(key: "faker",value: "name")
    email: String! @goTag(key: "gorm", value: "unique;not null;type:varchar(100);default:null") @goTag(key: "faker",value: "email")
    password: String @goTag(key: "gorm", value: "not null;type:varchar(100);default:null") @goField(forceResolver: true) @goTag(key: "faker",value: "password")
}

# With this user can reuse their credentials in different stores
type User implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(50);default:null") @goTag(key: "faker",value: "name")
    email: String! @goTag(key: "gorm", value: "unique;not null;type:varchar(100);default:null") @goTag(key: "faker",value: "email")
    username: String! @goTag(key: "gorm", value: "unique;not null;type:varchar(100);default:null") @goTag(key: "faker",value: "username")
    phone: String! @goTag(key: "gorm", value: "unique;null;type:varchar(20);default:null") @goTag(key: "faker",value: "username")
    password: String @goTag(key: "gorm", value: "not null;type:varchar(100);default:null") @goField(forceResolver: true) @goTag(key: "faker",value: "password")
}

input UserInput {
    name : String!
    username : String!
    email : String!
    password : String = password
}

input ChangePasswordInput {
    currentPassword : String!
    newPassword : String!
}


type Category implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey;")

    createdAt:Time! #@goTag(key: "gorm", value: "not null;default:null")
    updatedAt:Time! #@goTag(key: "gorm", value: "not null;default:null")
    deletedAt:Time

    # tablets/syrups/
    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(50);default:null")
    # unit box/each/package
    unit: String! @goTag(key: "gorm", value: "type:varchar(50);")
    type: CategoryType! #@goTag(key: "gorm",value: "type:enum('products', 'expenses');default:'products'")

    storeId: Int!
    store: Store! @goTag(key: "gorm", value:  "foreignKey:StoreID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")
}

input CategoryInput {
    name: String!
    unit: String = "units"
    type: CategoryType = products

    storeId: Int!
}

#todo find better name to reflect customer and supplier
type Customer implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey;")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(50);default:null")
    email: String @goTag(key: "gorm", value: "type:varchar(100);default:null")
    phone: String @goTag(key: "gorm", value: "type:varchar(100);default:null")
    comment: String @goTag(key: "gorm", value: "type:varchar(250);default:null")
    type: CustomerType!

    storeId: Int!
    store: Store! @goTag(key: "gorm", value:  "foreignKey:StoreID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    # todo Will be linked by searching phone/email above
    # todo allow email/phone number edit so that users can later be linked
    userId: Int
    user: User @goTag(key: "gorm", value:  "foreignKey:UserID;null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")
}

input CustomerInput {
    type: CustomerType!
    name: String!
    email: String
    phone: String

    storeId: Int!
}

type Product implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time! #@goTag(key: "gorm", value: "not null;default:null")
    updatedAt:Time! #@goTag(key: "gorm", value: "not null;default:null")
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(100);default:null")

    categoryId: Int!
    category: Category! @goTag(key: "gorm", value:  "foreignKey:CategoryID;not null;constraint:OnUpdate:RESTRICT,OnDelete:CASCADE;")

    brands: [Brand!]! @goTag(key: "gorm", value: "constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;") @goField(forceResolver: true)
}

input ProductInput {
    name: String!
    categoryId: Int!
    # Brands can be inserted when creating product.
    brands: [ProductBrandInput!]
}

# Product can be the same but with different brands
type Brand implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;not null;type:varchar(50);default:null")
    manufacturer: String @goTag(key: "gorm", value: "type:varchar(50);default:null")

    productId: Int!
    product: Product! @goTag(key: "gorm", value:  "foreignKey:ProductID;")
}

# This is used to create brand when creating product itself.
input ProductBrandInput {
    name: String!
    manufacturer: String
}

input BrandInput {
    name: String!
    manufacturer: String
    productId: Int!
}

# todo: expenses items should also come as items.
type Item implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    quantity: Int!  @goTag(key: "gorm", value: "type:integer;")
    batch: String @goTag(key: "gorm", value: "index;type:varchar(50);")
    description: String @goTag(key: "gorm", value: "size:100")
    # Prices should be zero for non expenses
    # empty string for non admins
    buyingPrice: String!  @goTag(key: "gorm", value: "type:numeric;default:0") @goField(forceResolver: true)
    sellingPrice: String!  @goTag(key: "gorm", value: "type:numeric;default:0")
    expiresAt: Time!

    productId: Int!
    product: Product! @goTag(key: "gorm", value:  "foreignKey:ProductID;not null;constraint:OnUpdate:RESTRICT,OnDelete:CASCADE;")

    # todo make it nullable when brand is deleted
    brandId: Int
    brand: Brand @goTag(key: "gorm", value:  "foreignKey:BrandID;constraint:OnUpdate:RESTRICT,OnDelete:CASCADE;")
}

input ItemInput {
    quantity: Int!
    buyingPrice: String!
    sellingPrice: String!
    batch: String
    description: String
    expiresAt: Time

    brandId: Int
    productId: Int!
}

# Even suppliers/customers can be termed as staffs
# todo we should allow specifying name here may be for handling customers
type Staff implements Gorm {
    id: ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    userId: Int!
    user: User! @goTag(key: "gorm", value: "foreignKey:UserID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    storeId: Int!
    store: Store! @goTag(key: "gorm", value: "foreignKey:StoreID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")
    # null means user has not been configured yet.
    role: StaffRole @goTag(key: "sql", value: "type:user_type")
}

input StaffInput {
    storeId: Int!
    userId: Int!
}


# add tracking type package/tabs
type Store implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    name: String! @goTag(key: "gorm", value: "index;size:50;not null;default:null") @goTag(key: "faker",value: "name")
    type: StoreType!

    ownerId: Int!
    owner: User! @goTag(key: "gorm", value: "foreignKey:OwnerID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    staffs: [Staff!]! @goTag(key: "gorm", value: "-")
}

input StoreInput {
    name: String!
}

type Order implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    # Here we will sum all items price
    totalPrice: String @goTag(key: "gorm", value: "-") @goField(forceResolver: true)
    type: OrderType!
    status: OrderStatus! @goTag(key: "gorm", value: "size:100")
    comment: String @goTag(key: "gorm", value: "size:100")

    # todo depending on order type this can be supplier
    # Customer can be nullable. Since POS don't have to register customer.
    customerId: Int
    customer: Customer @goTag(key: "gorm", value: "foreignKey:CustomerID;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    staffId: Int!
    staff: User! @goTag(key: "gorm", value: "foreignKey:StaffID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    # Where products come from
    issuerId: Int!
    issuer: Store! @goTag(key: "gorm", value: "foreignKey:IssuerID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    # todo if we transfer to different owner's store I think approve is must before altering stock
    # This is not null in transfer
    receiverId: Int
    receiver: Store @goTag(key: "gorm", value: "foreignKey:ReceiverID;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    items: [OrderItem!]! @goTag(key: "gorm", value: "constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;") @goField(forceResolver: true)
}

input OrderInput {
    type: OrderType!
    issuerId: Int!
    customerId: Int
    receiverId: Int
    comment: String
    items: [OrderItemInput!]!
}

type OrderItem implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    quantity: Int! @goTag(key: "gorm", value: "type:integer;")
    # user may be given discount. This price of just one item
    price: String! @goTag(key: "gorm", value: "type:numeric;")
    # This equals to sellingPrice * quantity
    subTotalPrice: String! @goField(forceResolver: true) @goTag(key: "gorm", value: "-")

    itemId: Int!
    item: Item! @goTag(key: "gorm", value:  "foreignKey:ItemID;not null;constraint:OnUpdate:RESTRICT,OnDelete:CASCADE;")

    orderId: Int!
    order: Order! @goTag(key: "gorm", value:  "foreignKey:OrderID;not null;")
}

input OrderItemInput {
    quantity: Int!
    # Just price because it can be buying/selling
    price: String!
    itemId: Int!
}

type Payment implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    amount: String! @goTag(key: "gorm", value: "type:numeric;")
    description: String @goTag(key: "gorm", value: "size:100")
    # Id to identify this payment
    referenceId: String @goTag(key: "gorm", value: "index;size:50")
    type: PaymentType!

    # Payment for what order.
    orderId: Int!
    order: Order! @goTag(key: "gorm", value: "foreignKey:OrderID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")
}

input PaymentInput {
    orderId: Int!
    description: String
    referenceId: String
    type: PaymentType!
}

# This just balances items not money
type Ledger implements Gorm {
    id:ID! @goTag(key: "gorm", value: "primaryKey")

    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time

    quantity: Int! @goTag(key: "gorm", value: "type:integer;")

    # Payment for what order.
    orderId: Int!
    order: Order! @goTag(key: "gorm", value: "foreignKey:OrderID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")

    # Payment for what order.
    itemId: Int!
    item: Item! @goTag(key: "gorm", value: "foreignKey:ItemID;not null;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;")
}

type Query {
    admin(id:ID!): Admin!
    admins: [Admin!]!
    brand(id:ID!): Brand!
    brands(productId:ID!): [Brand!]!
    category(id:ID!): Category!
    categories(storeId:ID!): [Category!]!
    customer(id:ID!): Customer!
    customers(storeId:ID!): [Customer!]!
    item(id: ID!): Item!
    items(by:ItemsBy! = store,value:ID!): [Item!]!
    order(id: ID!): Order!
    orders(by:OrdersBy! = store,value:ID!,limit: Int! =10,offset:Int! = 0,sortBy:SortBy! = desc,type:OrderType! = sale,status:OrderStatus): [Order!]!
    payment(id: ID!): Payment!
    payments(storeId:ID!): [Payment!]!
    product(id: ID!): Product!
    products(by:ProductsBy! = store,value:ID!): [Product!]!
    staff(id: ID!): Staff!
    staffs(storeId:ID!): [Staff!]!
    store(id: ID!): Store!
    stores: [Store!]!
    user(id: ID!): User!
    users: [User!]!
}

type Mutation {
    createBrand(input: BrandInput!): Brand! @hasRole(role: owner)
    createCategory(input: CategoryInput!): Category! @hasRole(role: owner)
    createCustomer(input: CustomerInput!): Customer! @hasRole(role: owner)
    createItem(input: ItemInput!): Item! @hasRole(role: owner)
    createOrder(input: OrderInput!): Order!
    createPayment(input: PaymentInput!): Payment! @hasRole(role: staff)
    createProduct(input: ProductInput!): Product! @hasRole(role: owner)
    createStaff(input: StaffInput!): Staff! @hasRole(role: owner)
    createStore(input: StoreInput!): Store! @hasRole(role: owner)
    # Only admins can create new user.
    createUser(input: UserInput!): User!

    changePassword(input: ChangePasswordInput!): User!

    editBrand(id: ID!,input: BrandInput!): Brand! @hasRole(role: owner)
    editCategory(id: ID!,input: CategoryInput!): Category! @hasRole(role: owner)
    editCustomer(id: ID!,input: CustomerInput!): Customer! @hasRole(role: owner)
    editItem(id: ID!,input: ItemInput!): Item! @hasRole(role: owner)
    editOrder(id: ID!,input: OrderInput!): Order!
    editProduct(id: ID!,input: ProductInput!): Product!
    editStaff(id: ID!,input: StaffInput!): Staff! @hasRole(role: owner)
    editStore(id: ID!,input: StoreInput!): Store! @hasRole(role: owner)
    editUser(id: ID!,input: UserInput!): User!

    deleteItem(id: ID!): Item! @hasRole(role: owner)

    # For testing if local ip works. Otherwise client will have to reconfigure.
    ping: String!
}

scalar Time

directive @goModel(
    model: String
    models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @hasRole(role: StaffRole!) on FIELD_DEFINITION